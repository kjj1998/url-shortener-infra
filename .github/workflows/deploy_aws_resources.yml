name: Deploy AWS resources for the url shortener app
run-name: ${{ github.actor }} is deploying AWS resources for the url shortener app

on:
  push:
    branches: [ master ]
env:
  AWS_REGION : ap-southeast-1
  EKS_CLUSTER_NAME: url-shortener-cluster-iac
  TF_VAR_GITHUB: true
    
permissions:
      id-token: write
      contents: read

jobs:
  deploy_aws_resources:
    name: 'Deploy AWS VPC, RDS, Elasticache and EKS resources for URL shortener app'
    runs-on: ubuntu-latest

    defaults:
      run:
        shell: bash
        working-directory: ./terraform/infra

    steps:
      - name: Git clone the repository
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4.0.1
        with:
          role-to-assume: arn:aws:iam::271407076537:role/GitHubAction-url-shortener-infra # change to reflect your IAM role’s ARN
          role-session-name: GitHub_to_AWS_via_FederatedOIDC
          aws-region: ${{ env.AWS_REGION }}

      - name: AWS Whoami
        run: aws sts get-caller-identity
      
      - name: Kubectl tool installer
        uses: Azure/setup-kubectl@v4.0.0
      
      - name: Install eksctl
        run: |
          ARCH=amd64
          PLATFORM=$(uname -s)_$ARCH
          
          curl -sLO "https://github.com/eksctl-io/eksctl/releases/latest/download/eksctl_$PLATFORM.tar.gz"
          
          tar -xzf eksctl_$PLATFORM.tar.gz -C /tmp && rm eksctl_$PLATFORM.tar.gz
          
          sudo mv /tmp/eksctl /usr/local/bin
      
      - name: Setup Terraform with specified version on the runner
        uses:  hashicorp/setup-terraform@v3.0.0
        with:
          terraform_version: "1.8.3"

      - name: Echo env variables
        run: echo ${{env}}
      
      - name: Terraform init
        run: terraform init

      - name: Terraform Format
        run: |
          terraform fmt -recursive
          terraform fmt -check

      - name: Terraform Plan
        run: terraform plan -input=false

      - name: Terraform Apply
        run: terraform apply -auto-approve

      - name: test eks
        run: aws eks get-token --cluster-name ${{ env.EKS_CLUSTER_NAME }} --region ${{ env.AWS_REGION }}
      
      - name: update kubeconfig
        run: aws eks update-kubeconfig --name ${{ env.EKS_CLUSTER_NAME }} --region ${{ env.AWS_REGION }}

      - name: check access
        run: kubectl get svc

      - name: check context
        run: kubectl config get-contexts

      - name: check iam entity
        run: kubectl describe configmap aws-auth -n kube-system

      # - name: Terraform init
      #   working-directory: ./terraform/load-balancer-controller
      #   run: terraform init

      # - name: Terraform Plan
      #   working-directory: ./terraform/load-balancer-controller
      #   run: terraform plan -input=false

      # - name: Terraform Apply
      #   working-directory: ./load-balancer-controller
      #   run: terraform apply -auto-approve
      
  deploy_aws_load_balancer_controller:
    needs: [deploy_aws_resources]
    name: 'Deploy AWS Load Balancer Controller for the EKS cluster'
    runs-on: ubuntu-latest

    defaults:
      run:
        shell: bash
        working-directory: ./terraform/load-balancer-controller

    steps:
      - name: Git clone the repository
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4.0.1
        with:
          role-to-assume: arn:aws:iam::271407076537:role/GitHubAction-url-shortener-infra # change to reflect your IAM role’s ARN
          role-session-name: GitHub_to_AWS_via_FederatedOIDC
          aws-region: ${{ env.AWS_REGION }}

      - name: AWS Whoami
        run: aws sts get-caller-identity

      - name: Setup Terraform with specified version on the runner
        uses:  hashicorp/setup-terraform@v3.0.0
        with:
          terraform_version: "1.8.3"

      - name: Terraform init
        run: terraform init
  
      - name: Terraform Plan
        run: terraform plan -input=false
  
      - name: Terraform Apply
        run: terraform apply -auto-approve
      