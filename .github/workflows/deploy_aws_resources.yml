# Workflow to deploy AWs resources for the url shortener app
name: Deploy AWS resources for the url shortener app
run-name: ${{ github.actor }} is deploying AWS resources for the url shortener app

# Controls when the action will run. Invokes the workflow on push events but only for the main branch
on:
  push:
    branches: [ master ]
env:
  AWS_REGION : ap-southeast-1 # Change to reflect your Region
  EKS_CLUSTER_NAME: url-shortener-cluster-iac # Change to reflect your EKS cluster name

# Permission can be added at job level or workflow level    
permissions:
      id-token: write   # This is required for requesting the JWT
      contents: read    # This is required for actions/checkout
jobs:
  deploy:
    name: 'Deploy'
    runs-on: ubuntu-latest

    defaults:
      run:
        shell: bash
        working-directory: ./terraform

    steps:
      - name: Git clone the repository
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4.0.1
        with:
          role-to-assume: arn:aws:iam::271407076537:role/GitHubAction-url-shortener-infra # change to reflect your IAM roleâ€™s ARN
          role-session-name: GitHub_to_AWS_via_FederatedOIDC
          aws-region: ${{ env.AWS_REGION }}
      
      # Hello from AWS: WhoAmI
      - name: Sts GetCallerIdentity
        run: aws sts get-caller-identity

      - name: Setup Terraform with specified version on the runner
        uses:  hashicorp/setup-terraform@v3.0.0
        with:
          terraform_version: "1.7.0"
      
      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Terraform init
        run: terraform init

      # Checks that all Terraform configuration files adhere to a canonical format
      - name: Terraform Format
        run: terraform fmt -check

      # Generates an execution plan for Terraform
      - name: Terraform Plan
        run: terraform plan -input=false

      # Apply the changes required to reach the desired state of the configuration
      - name: Terraform Apply
        run: terraform apply -auto-approve

      - name: Kubectl tool installer
        uses: Azure/setup-kubectl@v4.0.0
      
      - name: update kubeconfig
        run: aws eks update-kubeconfig --name ${{ env.EKS_CLUSTER_NAME }} --region ${{ env.AWS_REGION }}

      - name: apply ingress and namespace k8s resources
        working-directory: ./eks
        run: |
          kubectl apply -f namespace.yaml
          kubectl apply -f ingress.yaml
      
    #   # Test bash script
    #   - name: Test bash script
    #     working-directory: scripts
    #     run: chmod +x ./run.sh && ./run.sh

    #   # On push to "master", build or change infrastructure according to Terraform configuration files
    #   # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    #   - name: Terraform Apply
    #     run: terraform apply -auto-approve -input=false